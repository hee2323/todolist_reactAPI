{"ast":null,"code":"var _jsxFileName = \"/Users/jeongjaehee/source/todolist_react/src/TodoContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useReducer, createContext, useContext, useRef } from \"react\";\nimport axios from \"axios\";\nimport useAsync from \"./useAsync\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function getTodos() {\n  const response = await axios({\n    method: 'GET',\n    url: 'http://localhost:8080/api/todo'\n  });\n  return response.data;\n}\n\nconst [state, refetch] = useAsync(getTodos); // const initialTodos = [\n//   {\n//     id: 1,\n//     text: '프로젝트 생성하기',\n//     done: true\n//   },\n//   {\n//     id: 2,\n//     text: '컴포넌트 스타일링하기',\n//     done: false\n//   },\n//   {\n//     id: 3,\n//     text: 'Context 만들기',\n//     done: false\n//   },\n//   {\n//     id: 4,\n//     text: '기능 구현하기',\n//     done: false\n//   }\n// ];\n\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case 'CREATE':\n      console.log(action.todo);\n      return state.concat(action.todo);\n\n    case 'TOGGLE':\n      return state.map(todo => todo.id === action.id ? { ...todo,\n        done: !todo.done\n      } : todo);\n\n    case 'REMOVE':\n      return state.filter(todo => todo.id !== action.id);\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\n\nconst TodoStateContext = /*#__PURE__*/createContext();\nconst TodoDispatchContext = /*#__PURE__*/createContext();\nconst TodoNextIdContext = /*#__PURE__*/createContext();\nexport function TodoProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\n  const nextId = useRef(5);\n  return /*#__PURE__*/_jsxDEV(TodoStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(TodoDispatchContext.Provider, {\n      value: dispatch,\n      children: /*#__PURE__*/_jsxDEV(TodoNextIdContext.Provider, {\n        value: nextId,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n} // 커스텀 Hooks\n// TodoList에서 사용\n\n_s(TodoProvider, \"MLelIZr2z8XWFJ9lCw3UijgeTSM=\");\n\n_c = TodoProvider;\nexport function useTodoState() {\n  _s2();\n\n  const context = useContext(TodoStateContext);\n\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n\n  return context;\n} // TodoCreate에서 사용\n\n_s2(useTodoState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useTodoDispatch() {\n  _s3();\n\n  const context = useContext(TodoDispatchContext);\n\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n\n  return context;\n}\n\n_s3(useTodoDispatch, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useTodoNextId() {\n  _s4();\n\n  const context = useContext(TodoNextIdContext);\n\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n\n  return context;\n}\n\n_s4(useTodoNextId, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoProvider\");","map":{"version":3,"sources":["/Users/jeongjaehee/source/todolist_react/src/TodoContext.js"],"names":["React","useReducer","createContext","useContext","useRef","axios","useAsync","getTodos","response","method","url","data","state","refetch","todoReducer","action","type","console","log","todo","concat","map","id","done","filter","Error","TodoStateContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","children","dispatch","initialTodos","nextId","useTodoState","context","useTodoDispatch","useTodoNextId"],"mappings":"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","sourcesContent":["import React, { useReducer, createContext, useContext, useRef } from \"react\";\nimport axios from \"axios\";\nimport useAsync from \"./useAsync\";\n\n\nasync function getTodos() {\n  const response = await axios({\n    method: 'GET',\n    url: 'http://localhost:8080/api/todo',\n  });\n  return response.data;\n}\nconst [state, refetch] = useAsync(getTodos);\n// const initialTodos = [\n//   {\n//     id: 1,\n//     text: '프로젝트 생성하기',\n//     done: true\n//   },\n//   {\n//     id: 2,\n//     text: '컴포넌트 스타일링하기',\n//     done: false\n//   },\n//   {\n//     id: 3,\n//     text: 'Context 만들기',\n//     done: false\n//   },\n//   {\n//     id: 4,\n//     text: '기능 구현하기',\n//     done: false\n//   }\n// ];\n\nfunction todoReducer(state, action) {\n    switch (action.type) {\n      case 'CREATE':\n        console.log(action.todo);\n        return state.concat(action.todo);\n      case 'TOGGLE':\n        return state.map(todo =>\n          todo.id === action.id ? { ...todo, done: !todo.done } : todo\n        );\n      case 'REMOVE':\n        return state.filter(todo => todo.id !== action.id);\n      default:\n        throw new Error(`Unhandled action type: ${action.type}`);\n    }\n  }\n  \nconst TodoStateContext = createContext();\nconst TodoDispatchContext = createContext();\nconst TodoNextIdContext = createContext();\n\nexport function TodoProvider({ children }) {\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\n  const nextId = useRef(5);\n\n  return (\n    <TodoStateContext.Provider value={state}>\n      <TodoDispatchContext.Provider value={dispatch}>\n        <TodoNextIdContext.Provider value={nextId}>\n          {children}\n        </TodoNextIdContext.Provider>\n      </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n  );\n}\n\n// 커스텀 Hooks\n// TodoList에서 사용\nexport function useTodoState() {\n  const context = useContext(TodoStateContext);\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n  return context;\n}\n\n// TodoCreate에서 사용\nexport function useTodoDispatch() {\n  const context = useContext(TodoDispatchContext);\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n  return context;\n}\nexport function useTodoNextId() {\n  const context = useContext(TodoNextIdContext);\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}