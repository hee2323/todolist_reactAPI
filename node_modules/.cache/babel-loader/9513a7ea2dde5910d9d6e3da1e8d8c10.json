{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect, useCallback } from \"react\"; // LOADING, SUCCESS, ERROR\n\nexport function reducer(state, action) {\n  switch (action.type) {\n    case 'LOADING':\n      return {\n        loading: true,\n        data: null,\n        error: null\n      };\n\n    case 'SUCCESS':\n      return {\n        loading: false,\n        data: action.data,\n        error: null\n      };\n\n    case 'ERROR':\n      return {\n        loading: false,\n        data: null,\n        error: action.error\n      };\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n} // callback => api 호출 함수 / deps => useEffect에 넣을 두번째 파라미터 그대로 받아와서 사용\n\nexport default function useAsync(callback, deps = [], skip = false) {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    loading: false,\n    data: null,\n    error: null\n  });\n  const fetchData = useCallback(async () => {\n    dispatch({\n      type: 'LOADING'\n    });\n\n    try {\n      const data = await callback();\n      dispatch({\n        type: 'SUCCESS',\n        data\n      });\n    } catch (e) {\n      dispatch({\n        type: 'ERROR',\n        error: e\n      });\n    }\n  }, [callback]);\n  useEffect(() => {\n    fetchData();\n  }, deps);\n  return [state, fetchData];\n}\n\n_s(useAsync, \"v8bJzeg59Sl8RzEj8juuwjMQNbI=\");","map":{"version":3,"sources":["/Users/jeongjaehee/source/todolist_react/src/useAsync.js"],"names":["React","useReducer","useEffect","useCallback","reducer","state","action","type","loading","data","error","Error","useAsync","callback","deps","skip","dispatch","fetchData","e"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,WAAvC,QAA0D,OAA1D,C,CAEA;;AACA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,SAAL;AACI,aAAO;AACHC,QAAAA,OAAO,EAAE,IADN;AAEHC,QAAAA,IAAI,EAAE,IAFH;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,SAAL;AACI,aAAO;AACHF,QAAAA,OAAO,EAAE,KADN;AAEHC,QAAAA,IAAI,EAAEH,MAAM,CAACG,IAFV;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,OAAL;AACI,aAAO;AACHF,QAAAA,OAAO,EAAE,KADN;AAEHC,QAAAA,IAAI,EAAE,IAFH;AAGHC,QAAAA,KAAK,EAAEJ,MAAM,CAACI;AAHX,OAAP;;AAKJ;AACI,YAAM,IAAIC,KAAJ,CAAW,0BAAyBL,MAAM,CAACC,IAAK,EAAhD,CAAN;AApBR;AAsBH,C,CAED;;AACA,eAAe,SAASK,QAAT,CAAkBC,QAAlB,EAA4BC,IAAI,GAAG,EAAnC,EAAuCC,IAAI,GAAG,KAA9C,EAAqD;AAAA;;AAChE,QAAM,CAACV,KAAD,EAAQW,QAAR,IAAoBf,UAAU,CAACG,OAAD,EAAU;AAC1CI,IAAAA,OAAO,EAAE,KADiC;AAE1CC,IAAAA,IAAI,EAAE,IAFoC;AAG1CC,IAAAA,KAAK,EAAE;AAHmC,GAAV,CAApC;AAMA,QAAMO,SAAS,GAAGd,WAAW,CAAC,YAAY;AACtCa,IAAAA,QAAQ,CAAC;AAAET,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACA,YAAME,IAAI,GAAG,MAAMI,QAAQ,EAA3B;AACAG,MAAAA,QAAQ,CAAC;AAAET,QAAAA,IAAI,EAAE,SAAR;AAAmBE,QAAAA;AAAnB,OAAD,CAAR;AACH,KAHD,CAGE,OAAOS,CAAP,EAAU;AACRF,MAAAA,QAAQ,CAAC;AAAET,QAAAA,IAAI,EAAE,OAAR;AAAiBG,QAAAA,KAAK,EAAEQ;AAAxB,OAAD,CAAR;AACH;AACJ,GAR4B,EAQ1B,CAACL,QAAD,CAR0B,CAA7B;AAUAX,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,SAAS;AACZ,GAFQ,EAENH,IAFM,CAAT;AAIA,SAAO,CAACT,KAAD,EAAQY,SAAR,CAAP;AACH;;GAtBuBL,Q","sourcesContent":["import React, { useReducer, useEffect, useCallback } from \"react\";\n\n// LOADING, SUCCESS, ERROR\nexport function reducer(state, action) {\n    switch (action.type) {\n        case 'LOADING':\n            return {\n                loading: true,\n                data: null,\n                error: null,\n            };\n        case 'SUCCESS':\n            return {\n                loading: false,\n                data: action.data,\n                error: null,\n            };\n        case 'ERROR':\n            return {\n                loading: false,\n                data: null,\n                error: action.error,\n            };\n        default:\n            throw new Error(`Unhandled action type: ${action.type}`);\n    }\n}\n\n// callback => api 호출 함수 / deps => useEffect에 넣을 두번째 파라미터 그대로 받아와서 사용\nexport default function useAsync(callback, deps = [], skip = false) {\n    const [state, dispatch] = useReducer(reducer, {\n        loading: false,\n        data: null,\n        error: null\n    });\n\n    const fetchData = useCallback(async () => {\n        dispatch({ type: 'LOADING' });\n        try {\n            const data = await callback();\n            dispatch({ type: 'SUCCESS', data });\n        } catch (e) {\n            dispatch({ type: 'ERROR', error: e });\n        }\n    }, [callback]);\n\n    useEffect(() => {\n        fetchData();\n    }, deps);\n\n    return [state, fetchData];\n}\n"]},"metadata":{},"sourceType":"module"}