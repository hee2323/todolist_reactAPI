{"ast":null,"code":"var _jsxFileName = \"/Users/jeongjaehee/source/todolist_react0/src/TodoContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useReducer, createContext, useContext, useRef, useEffect } from \"react\";\nimport * as api from './api'; // api에서 내보낸 모든 함수들을 불러옴\n// const initialTodos = [\n//   {\n//     id: 1,\n//     text: '프로젝트 생성하기',\n//     done: true\n//   },\n//   {\n//     id: 2,\n//     text: '컴포넌트 스타일링하기',\n//     done: false\n//   },\n//   {\n//     id: 3,\n//     text: 'Context 만들기',\n//     done: false\n//   },\n//   {\n//     id: 4,\n//     text: '기능 구현하기',\n//     done: false\n//   }\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function createAsyncDispatcher(type, promiseFn) {\n  // 성공, 실패에 대한 액션 타입 문자열을 준비\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`; // actionHandler(dispatch, 1,2,3)이라고 쓰면 rest 안에 1,2,3이 담김\n\n  async function actionHandler(dispatch, ...rest) {\n    dispatch({\n      type\n    }); // 요청 시작됨\n\n    try {\n      // 파라미터로 받아온 promiseFn 호출 (...rest로 받아온거 풀어줄 것)\n      const data = await promiseFn(...rest); // rest 배열을 spread로 넣어줌\n\n      dispatch({\n        // 성공\n        type: SUCCESS,\n        data\n      });\n    } catch (e) {\n      dispatch({\n        // 실패\n        type: ERROR,\n        error: e\n      });\n    }\n  }\n\n  return actionHandler; // 만든 함수를 반환\n}\nconst initialAsyncState = {\n  loading: false,\n  data: null,\n  error: null\n}; // 로딩 중일 때 users와 user 상태 대체할 객체\n\nconst loadingState = {\n  loading: true,\n  data: null,\n  error: null\n}; // data를 파라미터로 가져와서 특정 개체를 생성 / 성공했을 때의 상태 만들어주는 함수\n\nconst success = data => ({\n  loading: false,\n  data,\n  error: null\n}); // error를 파라미터로 가져옴 / 실패했을 때의 상태를 만들어주는 함수\n\n\nconst error = e => ({\n  loading: false,\n  data: null,\n  error: e\n});\n\nconst getHandler = createAsyncHandler('GET_TODOS', 'todos');\nconst postHandler = createAsyncHandler('POST_TODOS', 'todos');\nconst putHandler = createAsyncHandler('PUT_TODOS', 'todos');\nconst deleteHandler = createAsyncHandler('DELETE_TODOS', 'todos'); // type => action type / key => users, user\n\nexport function createAsyncHandler(type, key) {\n  // 성공, 실패에 대한 액션 타입 문자열 준비\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`; // 함수를 새로 만들어서\n\n  function handler(state, action) {\n    switch (action.type) {\n      case type:\n        return { ...state,\n          // todos를 유지 (불변성 유지)\n          [key]: loadingState\n        };\n\n      case SUCCESS:\n        return { ...state,\n          [key]: success(action.data)\n        };\n\n      case ERROR:\n        return { ...state,\n          [key]: error(action.error)\n        };\n\n      default:\n        return state;\n    }\n  }\n\n  return handler; // 반환\n} // export async function getTodos(dispatch) {\n//   dispatch({ type: 'GET_TODOS'});\n//   try {\n//     const response = await axios.get(\n//         'http://localhost:8080/api/todo'\n//     );\n//     dispatch({\n//       type: 'GET_TODOS_SUCCESS',\n//       data: response.data\n//     });\n//   } catch (e) {\n//     dispatch({\n//       type: 'GET_TODOS_ERROR',\n//       error: e\n//     });\n//   }\n// }\n\nasync function todoReducer(state, action) {\n  switch (action.type) {\n    // case 'GET_TODOS':\n    //\n    //   const response = await axios.get(\n    //       'http://localhost:8080/api/todo'\n    //   );\n    //   try{\n    //     return {\n    //       ...state,\n    //       todo: loadingState\n    //     }\n    //   } catch (e) {\n    //\n    //     return;\n    //   }\n    // case 'GET_TODOS':\n    //   return {\n    //     ...state,\n    //     users: loadingState\n    //   };\n    // case 'GET_TODOS_SUCCESS':\n    //   return {\n    //     ...state,\n    //     users: success(action.data)\n    //   };\n    // case 'GET_TODOS_ERROR':\n    //   return {\n    //     ...state,\n    //     users: error(action.error)\n    //   };\n    case 'GET_TODOS':\n    case 'GET_TODOS_SUCCESS':\n    case 'GET_TODOS_ERROR':\n      return getHandler(state, action);\n\n    case 'POST_TODOS':\n    case 'POST_TODOS_SUCCESS':\n    case 'POST_TODOS_ERROR':\n      return postHandler(state, action);\n\n    case 'PUT_TODOS':\n    case 'PUT_TODOS_SUCCESS':\n    case 'PUT_TODOS_ERROR':\n      return putHandler(state, action);\n\n    case 'DELETE_TODOS':\n    case 'DELETE_TODOS_SUCCESS':\n    case 'DELETE_TODOS_ERROR':\n      return deleteHandler(state, action);\n    // case 'CREATE':\n    //   console.log(action.todo);\n    //   return state.concat(action.todo);\n    // case 'TOGGLE':\n    //   return state.map(todo =>\n    //     todo.id === action.id ? { ...todo, done: !todo.done } : todo\n    //   );\n    // case 'REMOVE':\n    //   return state.filter(todo => todo.id !== action.id);\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\n\nconst TodoStateContext = /*#__PURE__*/createContext(null);\nconst TodoDispatchContext = /*#__PURE__*/createContext(null);\nconst TodoNextIdContext = /*#__PURE__*/createContext();\nexport function TodoProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(todoReducer, getTodos);\n  const nextId = useRef(5);\n  const {\n    loading,\n    data: todos,\n    error\n  } = state;\n  useEffect(() => {\n    getTodos(dispatch);\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB85C\\uB529\\uC911..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 21\n  }, this);\n  if (!todos) return null;\n  console.log(state);\n  console.log(getTodos());\n  return /*#__PURE__*/_jsxDEV(TodoStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(TodoDispatchContext.Provider, {\n      value: dispatch,\n      children: /*#__PURE__*/_jsxDEV(TodoNextIdContext.Provider, {\n        value: nextId,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n} // 커스텀 Hooks\n// TodoList에서 사용\n\n_s(TodoProvider, \"UrN7nSbPQly0q4NWHCpOmU2rJrA=\");\n\n_c = TodoProvider;\nexport function useTodoState() {\n  _s2();\n\n  const context = useContext(TodoStateContext);\n\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n\n  return context;\n} // TodoCreate에서 사용\n\n_s2(useTodoState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useTodoDispatch() {\n  _s3();\n\n  const context = useContext(TodoDispatchContext);\n\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n\n  return context;\n}\n\n_s3(useTodoDispatch, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useTodoNextId() {\n  _s4();\n\n  const context = useContext(TodoNextIdContext);\n\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n\n  return context;\n}\n\n_s4(useTodoNextId, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport const getTodos = createAsyncDispatcher('GET_TODOS', api.getTodos);\nexport const postTodos = createAsyncDispatcher('POST_TODOS', api.postTodos);\nexport const putTodos = createAsyncDispatcher('PUT_TODOS', api.putTodos);\nexport const deleteTodos = createAsyncDispatcher('DELETE_TODOS', api.deleteTodos);\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoProvider\");","map":{"version":3,"sources":["/Users/jeongjaehee/source/todolist_react0/src/TodoContext.js"],"names":["React","useReducer","createContext","useContext","useRef","useEffect","api","createAsyncDispatcher","type","promiseFn","SUCCESS","ERROR","actionHandler","dispatch","rest","data","e","error","initialAsyncState","loading","loadingState","success","getHandler","createAsyncHandler","postHandler","putHandler","deleteHandler","key","handler","state","action","todoReducer","Error","TodoStateContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","children","getTodos","nextId","todos","console","log","useTodoState","context","useTodoDispatch","useTodoNextId","postTodos","putTodos","deleteTodos"],"mappings":"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","sourcesContent":["import React, {useReducer, createContext, useContext, useRef, useEffect} from \"react\";\nimport * as api from './api'; // api에서 내보낸 모든 함수들을 불러옴\n\n// const initialTodos = [\n//   {\n//     id: 1,\n//     text: '프로젝트 생성하기',\n//     done: true\n//   },\n//   {\n//     id: 2,\n//     text: '컴포넌트 스타일링하기',\n//     done: false\n//   },\n//   {\n//     id: 3,\n//     text: 'Context 만들기',\n//     done: false\n//   },\n//   {\n//     id: 4,\n//     text: '기능 구현하기',\n//     done: false\n//   }\n// ];\n\nexport function createAsyncDispatcher(type, promiseFn) {\n  // 성공, 실패에 대한 액션 타입 문자열을 준비\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n\n  // actionHandler(dispatch, 1,2,3)이라고 쓰면 rest 안에 1,2,3이 담김\n  async function actionHandler(dispatch, ...rest) {\n    dispatch({ type }); // 요청 시작됨\n    try {\n      // 파라미터로 받아온 promiseFn 호출 (...rest로 받아온거 풀어줄 것)\n      const data = await promiseFn(...rest); // rest 배열을 spread로 넣어줌\n      dispatch({ // 성공\n        type: SUCCESS,\n        data\n      });\n    } catch (e) {\n      dispatch({ // 실패\n        type: ERROR,\n        error: e\n      });\n    }\n  }\n  return actionHandler; // 만든 함수를 반환\n}\n\nconst initialAsyncState = {\n  loading: false,\n  data: null,\n  error: null\n};\n// 로딩 중일 때 users와 user 상태 대체할 객체\nconst loadingState = {\n  loading: true,\n  data: null,\n  error: null\n};\n// data를 파라미터로 가져와서 특정 개체를 생성 / 성공했을 때의 상태 만들어주는 함수\nconst success = (data) => ({\n  loading: false,\n  data,\n  error:null\n});\n// error를 파라미터로 가져옴 / 실패했을 때의 상태를 만들어주는 함수\nconst error = (e) => ({\n  loading: false,\n  data: null,\n  error: e\n});\n\nconst getHandler = createAsyncHandler('GET_TODOS', 'todos');\nconst postHandler = createAsyncHandler('POST_TODOS', 'todos');\nconst putHandler = createAsyncHandler('PUT_TODOS', 'todos');\nconst deleteHandler = createAsyncHandler('DELETE_TODOS', 'todos');\n\n// type => action type / key => users, user\nexport function createAsyncHandler(type, key) {\n  // 성공, 실패에 대한 액션 타입 문자열 준비\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n\n  // 함수를 새로 만들어서\n  function handler(state, action) {\n    switch (action.type) {\n      case type:\n        return {\n          ...state, // todos를 유지 (불변성 유지)\n          [key]: loadingState\n        };\n      case SUCCESS:\n        return {\n          ...state,\n          [key]: success(action.data)\n        };\n      case ERROR:\n        return {\n          ...state,\n          [key]: error(action.error)\n        };\n      default:\n        return state;\n    }\n  }\n  return handler; // 반환\n}\n\n// export async function getTodos(dispatch) {\n//   dispatch({ type: 'GET_TODOS'});\n//   try {\n//     const response = await axios.get(\n//         'http://localhost:8080/api/todo'\n//     );\n//     dispatch({\n//       type: 'GET_TODOS_SUCCESS',\n//       data: response.data\n//     });\n//   } catch (e) {\n//     dispatch({\n//       type: 'GET_TODOS_ERROR',\n//       error: e\n//     });\n//   }\n// }\n\nasync function todoReducer(state, action) {\n  switch (action.type) {\n    // case 'GET_TODOS':\n    //\n    //   const response = await axios.get(\n    //       'http://localhost:8080/api/todo'\n    //   );\n    //   try{\n    //     return {\n    //       ...state,\n    //       todo: loadingState\n    //     }\n    //   } catch (e) {\n    //\n    //     return;\n    //   }\n    // case 'GET_TODOS':\n    //   return {\n    //     ...state,\n    //     users: loadingState\n    //   };\n    // case 'GET_TODOS_SUCCESS':\n    //   return {\n    //     ...state,\n    //     users: success(action.data)\n    //   };\n    // case 'GET_TODOS_ERROR':\n    //   return {\n    //     ...state,\n    //     users: error(action.error)\n    //   };\n    case 'GET_TODOS':\n    case 'GET_TODOS_SUCCESS':\n    case 'GET_TODOS_ERROR':\n      return getHandler(state, action);\n    case 'POST_TODOS':\n    case 'POST_TODOS_SUCCESS':\n    case 'POST_TODOS_ERROR':\n      return postHandler(state, action);\n    case 'PUT_TODOS':\n    case 'PUT_TODOS_SUCCESS':\n    case 'PUT_TODOS_ERROR':\n      return putHandler(state, action);\n    case 'DELETE_TODOS':\n    case 'DELETE_TODOS_SUCCESS':\n    case 'DELETE_TODOS_ERROR':\n      return deleteHandler(state, action);\n    // case 'CREATE':\n    //   console.log(action.todo);\n    //   return state.concat(action.todo);\n    // case 'TOGGLE':\n    //   return state.map(todo =>\n    //     todo.id === action.id ? { ...todo, done: !todo.done } : todo\n    //   );\n    // case 'REMOVE':\n    //   return state.filter(todo => todo.id !== action.id);\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\n\nconst TodoStateContext = createContext(null);\nconst TodoDispatchContext = createContext(null);\nconst TodoNextIdContext = createContext();\n\nexport function TodoProvider({ children }) {\n  const [state, dispatch] = useReducer(todoReducer, getTodos);\n  const nextId = useRef(5);\n\n\n  const { loading, data: todos, error } = state;\n\n  useEffect(() => {\n    getTodos(dispatch)\n  }, []);\n\n  if (loading) return <div>로딩중..</div>\n  if (error) return <div>에러가 발생했습니다.</div>\n  if (!todos) return null;\n\n  console.log(state);\n  console.log(getTodos())\n\n  return (\n    <TodoStateContext.Provider value={state}>\n      <TodoDispatchContext.Provider value={dispatch}>\n        <TodoNextIdContext.Provider value={nextId}>\n          {children}\n        </TodoNextIdContext.Provider>\n      </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n  );\n}\n\n// 커스텀 Hooks\n// TodoList에서 사용\nexport function useTodoState() {\n  const context = useContext(TodoStateContext);\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n  return context;\n}\n\n// TodoCreate에서 사용\nexport function useTodoDispatch() {\n  const context = useContext(TodoDispatchContext);\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n  return context;\n}\nexport function useTodoNextId() {\n  const context = useContext(TodoNextIdContext);\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n  return context;\n}\n\nexport const getTodos = createAsyncDispatcher('GET_TODOS', api.getTodos);\nexport const postTodos = createAsyncDispatcher('POST_TODOS', api.postTodos);\nexport const putTodos = createAsyncDispatcher('PUT_TODOS', api.putTodos);\nexport const deleteTodos = createAsyncDispatcher('DELETE_TODOS', api.deleteTodos);\n"]},"metadata":{},"sourceType":"module"}