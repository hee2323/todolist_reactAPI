{"ast":null,"code":"// import React, { useReducer, createContext, useContext, useRef } from \"react\";\n// const initialTodos = [\n//   {\n//     id: 1,\n//     text: '프로젝트 생성하기',\n//     done: true\n//   },\n//   {\n//     id: 2,\n//     text: '컴포넌트 스타일링하기',\n//     done: false\n//   },\n//   {\n//     id: 3,\n//     text: 'Context 만들기',\n//     done: false\n//   },\n//   {\n//     id: 4,\n//     text: '기능 구현하기',\n//     done: false\n//   }\n// ];\n//\n// function todoReducer(state, action) {\n//     switch (action.type) {\n//       case 'CREATE':\n//         console.log(action.todo);\n//         return state.concat(action.todo);\n//       case 'TOGGLE':\n//         return state.map(todo =>\n//           todo.id === action.id ? { ...todo, done: !todo.done } : todo\n//         );\n//       case 'REMOVE':\n//         return state.filter(todo => todo.id !== action.id);\n//       default:\n//         throw new Error(`Unhandled action type: ${action.type}`);\n//     }\n//   }\n//\n// const TodoStateContext = createContext();\n// const TodoDispatchContext = createContext();\n// const TodoNextIdContext = createContext();\n//\n// export function TodoProvider({ children }) {\n//   const [state, dispatch] = useReducer(todoReducer, initialTodos);\n//   const nextId = useRef(5);\n//\n//   return (\n//     <TodoStateContext.Provider value={state}>\n//       <TodoDispatchContext.Provider value={dispatch}>\n//         <TodoNextIdContext.Provider value={nextId}>\n//           {children}\n//         </TodoNextIdContext.Provider>\n//       </TodoDispatchContext.Provider>\n//     </TodoStateContext.Provider>\n//   );\n// }\n//\n// // 커스텀 Hooks\n// // TodoList에서 사용\n// export function useTodoState() {\n//   const context = useContext(TodoStateContext);\n//   if (!context) {\n//     throw new Error(\"Cannot find TodoProvider\");\n//   }\n//   return context;\n// }\n//\n// // TodoCreate에서 사용\n// export function useTodoDispatch() {\n//   const context = useContext(TodoDispatchContext);\n//   if (!context) {\n//     throw new Error(\"Cannot find TodoProvider\");\n//   }\n//   return context;\n// }\n// export function useTodoNextId() {\n//   const context = useContext(TodoNextIdContext);\n//   if (!context) {\n//     throw new Error(\"Cannot find TodoProvider\");\n//   }\n//   return context;\n// }","map":{"version":3,"sources":["/Users/jeongjaehee/source/todolist_react/src/TodoContext.js"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { useReducer, createContext, useContext, useRef } from \"react\";\n\n// const initialTodos = [\n//   {\n//     id: 1,\n//     text: '프로젝트 생성하기',\n//     done: true\n//   },\n//   {\n//     id: 2,\n//     text: '컴포넌트 스타일링하기',\n//     done: false\n//   },\n//   {\n//     id: 3,\n//     text: 'Context 만들기',\n//     done: false\n//   },\n//   {\n//     id: 4,\n//     text: '기능 구현하기',\n//     done: false\n//   }\n// ];\n//\n// function todoReducer(state, action) {\n//     switch (action.type) {\n//       case 'CREATE':\n//         console.log(action.todo);\n//         return state.concat(action.todo);\n//       case 'TOGGLE':\n//         return state.map(todo =>\n//           todo.id === action.id ? { ...todo, done: !todo.done } : todo\n//         );\n//       case 'REMOVE':\n//         return state.filter(todo => todo.id !== action.id);\n//       default:\n//         throw new Error(`Unhandled action type: ${action.type}`);\n//     }\n//   }\n//\n// const TodoStateContext = createContext();\n// const TodoDispatchContext = createContext();\n// const TodoNextIdContext = createContext();\n//\n// export function TodoProvider({ children }) {\n//   const [state, dispatch] = useReducer(todoReducer, initialTodos);\n//   const nextId = useRef(5);\n//\n//   return (\n//     <TodoStateContext.Provider value={state}>\n//       <TodoDispatchContext.Provider value={dispatch}>\n//         <TodoNextIdContext.Provider value={nextId}>\n//           {children}\n//         </TodoNextIdContext.Provider>\n//       </TodoDispatchContext.Provider>\n//     </TodoStateContext.Provider>\n//   );\n// }\n//\n// // 커스텀 Hooks\n// // TodoList에서 사용\n// export function useTodoState() {\n//   const context = useContext(TodoStateContext);\n//   if (!context) {\n//     throw new Error(\"Cannot find TodoProvider\");\n//   }\n//   return context;\n// }\n//\n// // TodoCreate에서 사용\n// export function useTodoDispatch() {\n//   const context = useContext(TodoDispatchContext);\n//   if (!context) {\n//     throw new Error(\"Cannot find TodoProvider\");\n//   }\n//   return context;\n// }\n// export function useTodoNextId() {\n//   const context = useContext(TodoNextIdContext);\n//   if (!context) {\n//     throw new Error(\"Cannot find TodoProvider\");\n//   }\n//   return context;\n// }\n"]},"metadata":{},"sourceType":"module"}